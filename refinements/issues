binint :

- ne trouve pas l'instance Rnat_eq pour compléter l'appel de RZNP_eq. Un hint
  extern avec "exact Rnat_eq" lui permet de la trouver (la même chose est
  nécessaire pour Rpos_eq ensuite).
  note : dans typeclass_instances, on trouve "exact Rnat_eq" : problème de
  pattern ?
  ==> problème de type (Rnat : _ -> _ -> Type (et pas Prop))

- même problème avec RZNP_castNZ qui n'est pas trouvé. Un hint extern avec
  "eapply (RZNP_castNZ _ _)" conclut.
  ==> ce problème disparaît
  
- hint avec "apply: RZNP_eq" boucle.

- hint avec "apply RZNP_eq": instancie les opérateurs d'égalité avec eq_N alors
  que le second devrait être eq_positive, ne trouve pas cette possibilité
  pendant le backtracking ; en précisant les types pour que ça marche, on se
  retrouve dans le cas du permier point.

seqpoly :

- même problème d'instance non trouvée (Rnat_0), un hint extern n'apporte
  rien ==> autre chose qu'un problème de pattern ?
  note: en ajoutant un hint extern avec "admit" pour conclure le but, le but
  laissé de côté est résoluble par "exact Rnat_0", pourtant non appliqué si dans
  un hint extern...
  ==> disparaît

- (version avec hints) même problème d'opérateurs instanciés sans backtracking
  sur la solution (cas des polynômes à plusieurs variables).

- (version avec hints) certaines priorités à régler pour ne pas boucler sur les
  polynômes.
  note : les hints ne portent que sur les raffinements, les opérateurs étant
  définis avec des global instance, et les priorités à régler sont celles des
  opérateurs.

- (version avec hints) une fois les questions de priorités réglées, le hint
  extern sur RseqpolyC_eq ne conclut qu'avec "apply RseqpolyC_eq; tc", et des
  hints externs pour Rnat_add et Rpos_add ; sans cela, on bloque toujours sur
  Rnat_0.
